apiVersion: v1
kind: BuildConfig
metadata:
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "everything-as-code", "namespace": "", "kind": "DeploymentConfig"}]'
  creationTimestamp: null
  labels:
    name: everything-as-code
  name: everything-as-code
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        try {
           timeout(time: 20, unit: 'MINUTES') {
              def appName="everything-as-code"
              def project=""

              node {
                stage("Initialize") {
                  project = env.PROJECT_NAME
                }
              }

              node("maven") {
                stage("Checkout") {
                  git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
                }
                stage("Build WAR") {
                  sh "mvn clean package -Popenshift"
                  stash name:"war", includes:"target/ROOT.war"
                }
              }

              node {
                stage("Build Image") {
                  unstash name:"war"
                  sh "oc start-build ${appName}-docker --from-file=target/ROOT.war -n ${project}"
                  openshiftVerifyBuild bldCfg: "${appName}-docker", namespace: project, waitTime: '20', waitUnit: 'min'
                }
                stage("Deploy") {
                  openshiftDeploy deploymentConfig: appName, namespace: project
                }
              }
           }
        } catch (err) {
           echo "in catch block"
           echo "Caught: ${err}"
           currentBuild.result = 'FAILURE'
           throw err
        }
    type: JenkinsPipeline
  triggers:
  - github:
      secret: ""
    type: GitHub
  - generic:
      secret: ""
    type: Generic
